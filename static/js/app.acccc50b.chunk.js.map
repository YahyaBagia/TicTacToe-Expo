{"version":3,"sources":["src/common/Const.ts","src/components/Layout.tsx","src/components/Button.tsx","src/screens/HomeScreen.tsx","src/common/Utils.ts","src/screens/GameScreen.tsx","App.tsx","assets/Fonts/AveriaSerifLibre.ttf","assets/ForkOnGithub.png","assets/Sounds/Move_Sound.wav","assets/Sounds/Game_Draw.wav","assets/Sounds/Game_Won.wav"],"names":["Font","FontName","FontFile","require","Images","ForkOnGithub","Sounds","Move_Sound","Game_Draw","Game_Won","Dimensions","get","width","Layout","children","style","View","backgroundColor","flex","alignItems","SafeAreaView","maxWidth","padding","TouchableOpacity","position","top","right","onPress","Linking","openURL","Image","source","height","Button","title","borderRadius","justifyContent","Text","fontFamily","fontSize","color","textAlign","HomeScreen","navigation","push","gameWith","marginVertical","marginHorizontal","Utils","sleep","seconds","Promise","resolve","reject","setTimeout","playSound","audio","a","async","Audio","Sound","createAsync","sound","playAsync","GridItem","state","index","isWinningIndex","event","margin","activeOpacity","textShadowColor","undefined","textShadowOffset","textShadowRadius","GameScreen","route","params","useState","turn","setTurn","grids","setGrids","gameState","setGameState","winner","setWinner","winningIndexes","setWinningIndexes","useEffect","includes","didSomeoneWon","checkWinner","onBotsTurn","emptyIndexes","map","grid","botSelectedIndex","Math","floor","random","length","onGridPress","byBot","canGameContinue","isValidTurn","isGridEmpty","newGrids","flexDirection","goBack","Stack","createStackNavigator","App","useFonts","NavigationContainer","Navigator","screenOptions","headerShown","Screen","name","component","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.acccc50b.chunk.js","sourcesContent":["const BackgroundColor = \"212845\";\nconst ForegroundColor = \"#F8D332\";\n\nexport { BackgroundColor, ForegroundColor };\n\nexport const Font = {\n  FontName: \"AveriaSerifLibre\",\n  FontFile: require(\"../../assets/Fonts/AveriaSerifLibre.ttf\"),\n};\n\nexport const Images = {\n  ForkOnGithub: require(\"../../assets/ForkOnGithub.png\"),\n};\n\nexport const Sounds = {\n  Move_Sound: require(\"../../assets/Sounds/Move_Sound.wav\"),\n  Game_Draw: require(\"../../assets/Sounds/Game_Draw.wav\"),\n  Game_Won: require(\"../../assets/Sounds/Game_Won.wav\"),\n};\n","import React from \"react\";\nimport {\n  View,\n  SafeAreaView,\n  ViewStyle,\n  Platform,\n  Dimensions,\n  Image,\n  TouchableOpacity,\n  Linking,\n} from \"react-native\";\n\nimport { BackgroundColor, Images } from \"../common/Const\";\n\nconst { width } = Dimensions.get(\"screen\");\n\ninterface LayoutProps {\n  style?: ViewStyle;\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children, style }) => {\n  return (\n    <View style={{ backgroundColor: \"#373d57\", flex: 1, alignItems: \"center\" }}>\n      <SafeAreaView\n        style={{\n          backgroundColor: BackgroundColor,\n          flex: 1,\n          width: \"100%\", //Platform.OS === \"web\" ? (width > 480 ? 480 : width) : \"100%\",\n          maxWidth: 480,\n          padding: 15,\n          ...style,\n        }}\n      >\n        {children}\n      </SafeAreaView>\n      <TouchableOpacity\n        style={{\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n        }}\n        onPress={() => {\n          Linking.openURL(\"https://github.com/YahyaBagia/TicTacToe-Expo\");\n        }}\n      >\n        <Image\n          source={Images.ForkOnGithub}\n          style={{ width: 130, height: 130 }}\n        />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nexport default Layout;\n","import React from \"react\";\nimport { TouchableOpacity, Text, ViewStyle } from \"react-native\";\n\nimport { Font, ForegroundColor } from \"../common/Const\";\n\ninterface ButtonProps {\n  title: string;\n  onPress?: () => void;\n  style?: ViewStyle;\n}\n\nconst Button: React.FC<ButtonProps> = ({ title, onPress, style }) => {\n  return (\n    <TouchableOpacity\n      onPress={onPress}\n      style={{\n        height: 60,\n        backgroundColor: ForegroundColor,\n        borderRadius: 5,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        ...style,\n      }}\n    >\n      <Text\n        style={{\n          fontFamily: Font.FontName,\n          fontSize: 25,\n          color: \"#333027\",\n          textAlign: \"center\",\n        }}\n      >\n        {title}\n      </Text>\n    </TouchableOpacity>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport { Text, View } from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\n\nimport Layout from \"../components/Layout\";\nimport Button from \"../components/Button\";\n\nimport { StackParamList } from \"../Types\";\nimport { Font } from \"../common/Const\";\n\ntype HomeScreenNavigationProps = StackNavigationProp<\n  StackParamList,\n  \"HomeScreen\"\n>;\n\ntype HomeScreenProps = {\n  navigation: HomeScreenNavigationProps;\n};\n\nconst HomeScreen: React.FC<HomeScreenProps> = ({ navigation }) => {\n  return (\n    <Layout style={{ justifyContent: \"center\" }}>\n      <View style={{ height: \"50%\", justifyContent: \"center\" }}>\n        <Text\n          style={{\n            fontFamily: Font.FontName,\n            fontSize: 50,\n            color: \"white\",\n            textAlign: \"center\",\n          }}\n        >\n          Tic-Tac-Toe\n        </Text>\n      </View>\n\n      <View style={{ height: \"50%\" }}>\n        <Button\n          title={\"Play with Bot\"}\n          onPress={() => {\n            navigation.push(\"GameScreen\", { gameWith: \"Bot\" });\n          }}\n          style={{ marginVertical: 10, marginHorizontal: 10 }}\n        />\n        <Button\n          title={\"Play with Friend\"}\n          onPress={() => {\n            navigation.push(\"GameScreen\", { gameWith: \"Player\" });\n          }}\n          style={{ marginVertical: 10, marginHorizontal: 10 }}\n        />\n      </View>\n    </Layout>\n  );\n};\n\nexport default HomeScreen;\n","import { Audio } from \"expo-av\";\nimport { AVPlaybackSource } from \"expo-av/build/AV\";\n\nexport default class Utils {\n  //#region Utilities\n  static sleep = (seconds = 1) => {\n    return new Promise<void>((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, seconds * 1000);\n    });\n  };\n\n  static playSound = async (audio: AVPlaybackSource) => {\n    const { sound } = await Audio.Sound.createAsync(audio);\n    await sound.playAsync();\n  };\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  GestureResponderEvent,\n  TouchableOpacity,\n} from \"react-native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\n\nimport Utils from \"../common/Utils\";\nimport { Font, ForegroundColor, Sounds } from \"../common/Const\";\n\nimport Layout from \"../components/Layout\";\nimport Button from \"../components/Button\";\n\nimport { StackParamList } from \"../Types\";\n\ntype GameScreenNavigationProps = StackNavigationProp<\n  StackParamList,\n  \"GameScreen\"\n>;\n\ntype GameScreenRouteProp = RouteProp<StackParamList, \"GameScreen\">;\n\ntype GameScreenProps = {\n  navigation: GameScreenNavigationProps;\n  route: GameScreenRouteProp;\n};\n\nconst GameScreen: React.FC<GameScreenProps> = ({ navigation, route }) => {\n  const { gameWith = \"Bot\" } = route.params;\n\n  const [turn, setTurn] = useState<\"CROSS\" | \"ZERO\">(\"CROSS\");\n  const [grids, setGrids] = useState<Array<\"CROSS\" | \"ZERO\" | \"EMPTY\">>([\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n  ]);\n  const [gameState, setGameState] = useState<\"Game Over\" | \"Game Draw\" | \"\">(\n    \"\"\n  );\n  const [winner, setWinner] = useState<\"CROSS\" | \"ZERO\" | undefined>(undefined);\n  const [winningIndexes, setWinningIndexes] = useState<number[]>([]);\n\n  useEffect(() => {\n    if (grids.includes(\"CROSS\") === false && grids.includes(\"ZERO\") === false) {\n      return;\n    }\n\n    //CHECK WIN LOGIC\n    const didSomeoneWon = checkWinner();\n    //CHECK IF GAME DRAW\n    if (didSomeoneWon) {\n      setGameState(\"Game Over\");\n    } else if (didSomeoneWon === false && grids.includes(\"EMPTY\") === false) {\n      setGameState(\"Game Draw\");\n    } else {\n      setTurn(turn === \"CROSS\" ? \"ZERO\" : \"CROSS\");\n    }\n  }, [grids]);\n\n  useEffect(() => {\n    //CHECK IF PLAYING AGAINTS BOT\n    if (turn === \"ZERO\" && gameWith === \"Bot\") {\n      onBotsTurn();\n    }\n  }, [turn]);\n\n  useEffect(() => {\n    if (gameState === \"Game Over\") {\n      Utils.playSound(Sounds.Game_Won);\n    } else if (gameState === \"Game Draw\") {\n      Utils.playSound(Sounds.Game_Draw);\n    }\n  }, [gameState]);\n\n  const onBotsTurn = async () => {\n    await Utils.sleep();\n    //TAKE TURN AUTOMATICALLY\n    let emptyIndexes: number[] = [];\n    grids.map((grid, index) => {\n      if (grid === \"EMPTY\") {\n        emptyIndexes.push(index);\n      }\n    });\n\n    const botSelectedIndex = Math.floor(Math.random() * emptyIndexes.length);\n    onGridPress(emptyIndexes[botSelectedIndex], true);\n  };\n\n  const checkWinner = (): boolean => {\n    if (\n      grids[0] !== \"EMPTY\" &&\n      grids[0] === grids[1] &&\n      grids[1] === grids[2]\n    ) {\n      setWinner(grids[0]);\n      setWinningIndexes([0, 1, 2]);\n      return true;\n    } else if (\n      grids[3] !== \"EMPTY\" &&\n      grids[3] === grids[4] &&\n      grids[4] === grids[5]\n    ) {\n      setWinner(grids[3]);\n      setWinningIndexes([3, 4, 5]);\n      return true;\n    } else if (\n      grids[6] !== \"EMPTY\" &&\n      grids[6] === grids[7] &&\n      grids[7] === grids[8]\n    ) {\n      setWinner(grids[6]);\n      setWinningIndexes([6, 7, 8]);\n      return true;\n    } else if (\n      grids[0] !== \"EMPTY\" &&\n      grids[0] === grids[3] &&\n      grids[3] === grids[6]\n    ) {\n      setWinner(grids[0]);\n      setWinningIndexes([0, 3, 6]);\n      return true;\n    } else if (\n      grids[1] !== \"EMPTY\" &&\n      grids[1] === grids[4] &&\n      grids[4] === grids[7]\n    ) {\n      setWinner(grids[1]);\n      setWinningIndexes([1, 4, 7]);\n      return true;\n    } else if (\n      grids[2] !== \"EMPTY\" &&\n      grids[2] === grids[5] &&\n      grids[5] === grids[8]\n    ) {\n      setWinner(grids[2]);\n      setWinningIndexes([2, 5, 8]);\n      return true;\n    } else if (\n      grids[0] !== \"EMPTY\" &&\n      grids[0] === grids[4] &&\n      grids[4] === grids[8]\n    ) {\n      setWinner(grids[0]);\n      setWinningIndexes([0, 4, 8]);\n      return true;\n    } else if (\n      grids[2] !== \"EMPTY\" &&\n      grids[2] === grids[4] &&\n      grids[4] === grids[6]\n    ) {\n      setWinner(grids[2]);\n      setWinningIndexes([2, 4, 6]);\n      return true;\n    }\n    return false;\n  };\n\n  const onGridPress = (index: number, byBot?: boolean) => {\n    const canGameContinue = gameState.length === 0;\n    let isValidTurn = true;\n    if (gameWith === \"Bot\" && turn === \"ZERO\" && !byBot) {\n      isValidTurn = false;\n    }\n    const isGridEmpty = grids[index] === \"EMPTY\";\n\n    if (canGameContinue && isValidTurn && isGridEmpty) {\n      let newGrids = [...grids];\n      newGrids[index] = turn;\n      setGrids([...newGrids]);\n      Utils.playSound(Sounds.Move_Sound);\n    }\n  };\n\n  const onReset = () => {\n    setTurn(\"CROSS\");\n    setGrids([\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n    ]);\n    setGameState(\"\");\n    setWinner(undefined);\n    setWinningIndexes([]);\n  };\n\n  return (\n    <Layout style={{ justifyContent: \"center\" }}>\n      <Text\n        style={{\n          fontFamily: Font.FontName,\n          fontSize: 45,\n          color: ForegroundColor,\n          textAlign: \"center\",\n        }}\n      >\n        {gameState === \"\"\n          ? turn === \"CROSS\"\n            ? \"X's Turn\"\n            : \"O's Turn\"\n          : gameState === \"Game Over\"\n          ? winner === \"CROSS\"\n            ? \"⭐ X Won ⭐\"\n            : \"⭐ O Won ⭐\"\n          : \"😑 Draw 😑\"}\n      </Text>\n      <View\n        style={{\n          marginVertical: 20,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <View\n          style={{\n            width: 300,\n            height: 300,\n            backgroundColor: \"#2369EE\",\n            borderRadius: 6,\n          }}\n        >\n          <View style={{ flexDirection: \"row\" }}>\n            <GridItem\n              index={0}\n              onPress={onGridPress}\n              state={grids[0]}\n              isWinningIndex={winningIndexes.includes(0)}\n            />\n            <GridItem\n              index={1}\n              onPress={onGridPress}\n              state={grids[1]}\n              isWinningIndex={winningIndexes.includes(1)}\n            />\n            <GridItem\n              index={2}\n              onPress={onGridPress}\n              state={grids[2]}\n              isWinningIndex={winningIndexes.includes(2)}\n            />\n          </View>\n          <View style={{ flexDirection: \"row\" }}>\n            <GridItem\n              index={3}\n              onPress={onGridPress}\n              state={grids[3]}\n              isWinningIndex={winningIndexes.includes(3)}\n            />\n            <GridItem\n              index={4}\n              onPress={onGridPress}\n              state={grids[4]}\n              isWinningIndex={winningIndexes.includes(4)}\n            />\n            <GridItem\n              index={5}\n              onPress={onGridPress}\n              state={grids[5]}\n              isWinningIndex={winningIndexes.includes(5)}\n            />\n          </View>\n          <View style={{ flexDirection: \"row\" }}>\n            <GridItem\n              index={6}\n              onPress={onGridPress}\n              state={grids[6]}\n              isWinningIndex={winningIndexes.includes(6)}\n            />\n            <GridItem\n              index={7}\n              onPress={onGridPress}\n              state={grids[7]}\n              isWinningIndex={winningIndexes.includes(7)}\n            />\n            <GridItem\n              index={8}\n              onPress={onGridPress}\n              state={grids[8]}\n              isWinningIndex={winningIndexes.includes(8)}\n            />\n          </View>\n        </View>\n      </View>\n      <View style={{ flexDirection: \"row\" }}>\n        <Button\n          title={\"Reset\"}\n          onPress={onReset}\n          style={{ marginVertical: 10, marginHorizontal: 10, flex: 1 }}\n        />\n        <Button\n          title={\"Exit\"}\n          onPress={navigation.goBack}\n          style={{ marginVertical: 10, marginHorizontal: 10, flex: 1 }}\n        />\n      </View>\n    </Layout>\n  );\n};\n\ninterface GridItemProps {\n  index: number;\n  state: \"ZERO\" | \"CROSS\" | \"EMPTY\";\n  onPress: (index: number) => void;\n  isWinningIndex: boolean;\n}\nconst GridItem: React.FC<GridItemProps> = ({\n  state,\n  index,\n  onPress,\n  isWinningIndex,\n}) => (\n  <TouchableOpacity\n    onPress={(event: GestureResponderEvent) => onPress(index)}\n    style={{\n      backgroundColor: \"#2c3045\",\n      height: 98,\n      width: 98,\n      margin: 1,\n      borderRadius: 6,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    }}\n    activeOpacity={1}\n  >\n    {state !== \"EMPTY\" ? (\n      <Text\n        style={{\n          width: \"100%\",\n          textAlign: \"center\",\n          fontSize: isWinningIndex ? 65 : 45,\n          fontFamily: Font.FontName,\n          color: ForegroundColor,\n          textShadowColor: isWinningIndex ? ForegroundColor : undefined,\n          textShadowOffset: isWinningIndex\n            ? { width: -1, height: 1 }\n            : undefined,\n          textShadowRadius: isWinningIndex ? 15 : undefined,\n        }}\n      >\n        {state === \"CROSS\" ? \"X\" : \"O\"}\n      </Text>\n    ) : (\n      <></>\n    )}\n  </TouchableOpacity>\n);\n\nexport default GameScreen;\n","import React from \"react\";\n\nimport { useFonts } from \"expo-font\";\nimport AppLoading from \"expo-app-loading\";\nimport { StatusBar } from \"expo-status-bar\";\n\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\n\nimport HomeScreen from \"./src/screens/HomeScreen\";\nimport GameScreen from \"./src/screens/GameScreen\";\n\nimport { StackParamList } from \"./src/Types\";\nimport { Font } from \"./src/common/Const\";\n\nconst Stack = createStackNavigator<StackParamList>();\n\nconst App = () => {\n  const [fontLoaded] = useFonts({\n    [Font.FontName]: Font.FontFile,\n  });\n\n  if (!fontLoaded) {\n    return <AppLoading />;\n  }\n\n  return (\n    <>\n      <NavigationContainer>\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          <Stack.Screen name=\"HomeScreen\" component={HomeScreen} />\n          <Stack.Screen name=\"GameScreen\" component={GameScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n      <StatusBar style=\"light\" />\n    </>\n  );\n};\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"./fonts/AveriaSerifLibre.ttf\";","module.exports = __webpack_public_path__ + \"static/media/ForkOnGithub.0c95a7c5.png\";","module.exports = __webpack_public_path__ + \"static/media/Move_Sound.3e2b8a36.wav\";","module.exports = __webpack_public_path__ + \"static/media/Game_Draw.183e2b8a.wav\";","module.exports = __webpack_public_path__ + \"static/media/Game_Won.9b5b1a62.wav\";"],"sourceRoot":""}