{"version":3,"sources":["src/common/Utils.ts","src/common/Const.ts","src/components/Layout.tsx","src/components/Button.tsx","src/screens/HomeScreen.tsx","src/screens/GameScreen.tsx","App.tsx","assets/Fonts/Kanit-Bold.ttf","assets/ForkOnGithub.png","assets/Sounds/Move_Sound.wav","assets/Sounds/Game_Draw.wav","assets/Sounds/Game_Won.wav"],"names":["Utils","Sleep","seconds","Promise","resolve","reject","setTimeout","PlaySound","audio","a","async","Audio","Sound","createAsync","sound","playAsync","IsOnWeb","Platform","OS","Font","FontName","FontFile","require","Images","ForkOnGithub","Sounds","Move_Sound","Game_Draw","Game_Won","Layout","children","style","View","backgroundColor","flex","alignItems","SafeAreaView","width","maxWidth","padding","TouchableOpacity","position","top","right","onPress","Linking","openURL","Image","source","height","Button","title","borderRadius","justifyContent","Text","fontFamily","fontSize","color","textAlign","HomeScreen","navigation","push","gameWith","marginVertical","marginHorizontal","GridItem","state","index","isWinningIndex","margin","activeOpacity","undefined","textShadowColor","textShadowOffset","textShadowRadius","GameScreen","route","params","useState","turn","setTurn","Array","grids","setGrids","gameState","setGameState","winner","setWinner","winningIndexes","setWinningIndexes","useEffect","includes","didSomeoneWon","checkWinner","onBotsTurn","emptyIndexes","map","grid","botSelectedIndex","Math","floor","random","length","onGridPress","winningIndexArray","find","winArr","first","second","third","byBot","canGameContinue","isValidTurn","newGrids","i","ind1","ind2","ind3","flexDirection","goBack","Stack","createStackNavigator","App","useFonts","NavigationContainer","Navigator","screenOptions","headerShown","Screen","name","component","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.dbf674e2.chunk.js","sourcesContent":["import { Platform } from \"react-native\";\nimport { Audio } from \"expo-av\";\nimport { AVPlaybackSource } from \"expo-av/build/AV\";\n\nexport default class Utils {\n  //#region Utilities\n  static Sleep = (seconds = 1) => {\n    return new Promise<void>((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, seconds * 1000);\n    });\n  };\n\n  static PlaySound = async (audio: AVPlaybackSource) => {\n    const { sound } = await Audio.Sound.createAsync(audio);\n    await sound.playAsync();\n  };\n\n  static IsOnWeb = () => Platform.OS === \"web\";\n}\n","const BackgroundColor = \"212845\";\nconst ForegroundColor = \"#F8D332\";\n\nexport { BackgroundColor, ForegroundColor };\n\nexport const Font = {\n  FontName: \"Kanit-Bold\",\n  FontFile: require(\"../../assets/Fonts/Kanit-Bold.ttf\"),\n};\n\nexport const Images = {\n  ForkOnGithub: require(\"../../assets/ForkOnGithub.png\"),\n};\n\nexport const Sounds = {\n  Move_Sound: require(\"../../assets/Sounds/Move_Sound.wav\"),\n  Game_Draw: require(\"../../assets/Sounds/Game_Draw.wav\"),\n  Game_Won: require(\"../../assets/Sounds/Game_Won.wav\"),\n};\n","import React from \"react\";\nimport {\n  View,\n  SafeAreaView,\n  ViewStyle,\n  Image,\n  TouchableOpacity,\n  Linking,\n} from \"react-native\";\n\nimport Utils from \"../common/Utils\";\nimport { BackgroundColor, Images } from \"../common/Const\";\n\ninterface LayoutProps {\n  style?: ViewStyle;\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children, style }) => {\n  return (\n    <View style={{ backgroundColor: \"#373d57\", flex: 1, alignItems: \"center\" }}>\n      <SafeAreaView\n        style={{\n          backgroundColor: BackgroundColor,\n          flex: 1,\n          width: \"100%\",\n          maxWidth: 480,\n          padding: 15,\n          ...style,\n        }}\n      >\n        {children}\n      </SafeAreaView>\n      {Utils.IsOnWeb() && (\n        <TouchableOpacity\n          style={{\n            position: \"absolute\",\n            top: 0,\n            right: 0,\n          }}\n          onPress={() => {\n            Linking.openURL(\"https://github.com/YahyaBagia/TicTacToe-Expo\");\n          }}\n        >\n          <Image\n            source={Images.ForkOnGithub}\n            style={{ width: 130, height: 130 }}\n          />\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nexport default Layout;\n","import React from \"react\";\nimport { TouchableOpacity, Text, ViewStyle } from \"react-native\";\n\nimport { Font, ForegroundColor } from \"../common/Const\";\n\ninterface ButtonProps {\n  title: string;\n  onPress?: () => void;\n  style?: ViewStyle;\n}\n\nconst Button: React.FC<ButtonProps> = ({ title, onPress, style }) => {\n  return (\n    <TouchableOpacity\n      onPress={onPress}\n      style={{\n        height: 60,\n        backgroundColor: ForegroundColor,\n        borderRadius: 5,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        ...style,\n      }}\n    >\n      <Text\n        style={{\n          fontFamily: Font.FontName,\n          fontSize: 25,\n          color: \"#333027\",\n          textAlign: \"center\",\n        }}\n      >\n        {title}\n      </Text>\n    </TouchableOpacity>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport { Text, View } from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\n\nimport Layout from \"../components/Layout\";\nimport Button from \"../components/Button\";\n\nimport { StackParamList } from \"../Types\";\nimport { Font } from \"../common/Const\";\n\ntype HomeScreenNavigationProps = StackNavigationProp<\n  StackParamList,\n  \"HomeScreen\"\n>;\n\ntype HomeScreenProps = {\n  navigation: HomeScreenNavigationProps;\n};\n\nconst HomeScreen: React.FC<HomeScreenProps> = ({ navigation }) => {\n  return (\n    <Layout style={{ justifyContent: \"center\" }}>\n      <View style={{ height: \"50%\", justifyContent: \"center\" }}>\n        <Text\n          style={{\n            fontFamily: Font.FontName,\n            fontSize: 50,\n            color: \"white\",\n            textAlign: \"center\",\n          }}\n        >\n          Tic-Tac-Toe\n        </Text>\n      </View>\n\n      <View style={{ height: \"50%\" }}>\n        <Button\n          title={\"Play with Bot\"}\n          onPress={() => {\n            navigation.push(\"GameScreen\", { gameWith: \"Bot\" });\n          }}\n          style={{ marginVertical: 10, marginHorizontal: 10 }}\n        />\n        <Button\n          title={\"Play with Friend\"}\n          onPress={() => {\n            navigation.push(\"GameScreen\", { gameWith: \"Player\" });\n          }}\n          style={{ marginVertical: 10, marginHorizontal: 10 }}\n        />\n      </View>\n    </Layout>\n  );\n};\n\nexport default HomeScreen;\n","import React, { useState, useEffect } from \"react\";\nimport { View, Text, TouchableOpacity } from \"react-native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\n\nimport Utils from \"../common/Utils\";\nimport { Font, ForegroundColor, Sounds } from \"../common/Const\";\n\nimport Layout from \"../components/Layout\";\nimport Button from \"../components/Button\";\n\nimport { StackParamList } from \"../Types\";\n\ntype GameScreenNavigationProps = StackNavigationProp<\n  StackParamList,\n  \"GameScreen\"\n>;\n\ntype GameScreenRouteProp = RouteProp<StackParamList, \"GameScreen\">;\n\ntype GameScreenProps = {\n  navigation: GameScreenNavigationProps;\n  route: GameScreenRouteProp;\n};\n\nconst GameScreen: React.FC<GameScreenProps> = ({ navigation, route }) => {\n  const { gameWith = \"Bot\" } = route.params;\n\n  const [turn, setTurn] = useState<\"CROSS\" | \"ZERO\">(\"CROSS\");\n  const [grids, setGrids] = useState<Array<\"CROSS\" | \"ZERO\" | undefined>>([\n    ...new Array(9),\n  ]);\n  const [gameState, setGameState] = useState<\"Game Over\" | \"Game Draw\" | \"\">(\n    \"\"\n  );\n  const [winner, setWinner] = useState<\"CROSS\" | \"ZERO\" | undefined>(undefined);\n  const [winningIndexes, setWinningIndexes] = useState<number[]>([]);\n\n  useEffect(() => {\n    if (grids.includes(\"CROSS\") === false && grids.includes(\"ZERO\") === false) {\n      return;\n    }\n\n    const didSomeoneWon = checkWinner();\n    if (didSomeoneWon) {\n      setGameState(\"Game Over\");\n    } else if (didSomeoneWon === false && grids.includes(undefined) === false) {\n      setGameState(\"Game Draw\");\n    } else {\n      setTurn(turn === \"CROSS\" ? \"ZERO\" : \"CROSS\");\n    }\n  }, [grids]);\n\n  useEffect(() => {\n    //CHECK IF PLAYING AGAINTS BOT\n    if (turn === \"ZERO\" && gameWith === \"Bot\") {\n      onBotsTurn();\n    }\n  }, [turn]);\n\n  useEffect(() => {\n    if (gameState === \"Game Over\") {\n      Utils.PlaySound(Sounds.Game_Won);\n    } else if (gameState === \"Game Draw\") {\n      Utils.PlaySound(Sounds.Game_Draw);\n    }\n  }, [gameState]);\n\n  const onBotsTurn = async () => {\n    await Utils.Sleep();\n    //TAKE TURN AUTOMATICALLY\n    let emptyIndexes: number[] = [];\n    grids.map((grid, index) => {\n      if (grid === undefined) {\n        emptyIndexes.push(index);\n      }\n    });\n\n    const botSelectedIndex = Math.floor(Math.random() * emptyIndexes.length);\n    onGridPress(emptyIndexes[botSelectedIndex], true);\n  };\n\n  const checkWinner = (): boolean => {\n    const winArrays = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n\n    const winningIndexArray = winArrays.find((winArr) => {\n      const [first, second, third] = winArr;\n      if (\n        grids[first] !== undefined &&\n        grids[first] === grids[second] &&\n        grids[second] === grids[third]\n      ) {\n        return winArr;\n      }\n    });\n\n    if (winningIndexArray !== undefined) {\n      const [first] = winningIndexArray;\n      const winner = grids[first];\n      setWinner(winner);\n      setWinningIndexes(winningIndexArray);\n      return true;\n    }\n    return false;\n  };\n\n  const onGridPress = (index: number, byBot?: boolean) => {\n    const canGameContinue = gameState.length === 0;\n    let isValidTurn = true;\n    if (gameWith === \"Bot\" && turn === \"ZERO\" && !byBot) {\n      isValidTurn = false;\n    }\n\n    if (canGameContinue && isValidTurn && grids[index] === undefined) {\n      let newGrids = [...grids];\n      newGrids[index] = turn;\n      setGrids([...newGrids]);\n      Utils.PlaySound(Sounds.Move_Sound);\n    }\n  };\n\n  const onReset = () => {\n    setTurn(\"CROSS\");\n    setGrids([...new Array(9)]);\n    setGameState(\"\");\n    setWinner(undefined);\n    setWinningIndexes([]);\n  };\n\n  return (\n    <Layout style={{ justifyContent: \"center\" }}>\n      <Text\n        style={{\n          fontFamily: Font.FontName,\n          fontSize: 45,\n          color: ForegroundColor,\n          textAlign: \"center\",\n        }}\n      >\n        {gameState === \"\"\n          ? turn === \"CROSS\"\n            ? \"X's Turn\"\n            : \"O's Turn\"\n          : gameState === \"Game Over\"\n          ? winner === \"CROSS\"\n            ? \"⭐ X Won ⭐\"\n            : \"⭐ O Won ⭐\"\n          : \"😑 Draw 😑\"}\n      </Text>\n      <View\n        style={{\n          marginVertical: 20,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <View\n          style={{\n            width: 300,\n            height: 300,\n            backgroundColor: \"#2369EE\",\n            borderRadius: 6,\n          }}\n        >\n          {[\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n          ].map(([ind1, ind2, ind3], i) => (\n            <View style={{ flexDirection: \"row\" }} key={`${i}`}>\n              <GridItem\n                index={ind1}\n                onPress={onGridPress}\n                state={grids[ind1]}\n                isWinningIndex={winningIndexes.includes(ind1)}\n              />\n              <GridItem\n                index={ind2}\n                onPress={onGridPress}\n                state={grids[ind2]}\n                isWinningIndex={winningIndexes.includes(ind2)}\n              />\n              <GridItem\n                index={ind3}\n                onPress={onGridPress}\n                state={grids[ind3]}\n                isWinningIndex={winningIndexes.includes(ind3)}\n              />\n            </View>\n          ))}\n        </View>\n      </View>\n      <View style={{ flexDirection: \"row\" }}>\n        <Button\n          title={\"Reset\"}\n          onPress={onReset}\n          style={{ marginVertical: 10, marginHorizontal: 10, flex: 1 }}\n        />\n        <Button\n          title={\"Exit\"}\n          onPress={navigation.goBack}\n          style={{ marginVertical: 10, marginHorizontal: 10, flex: 1 }}\n        />\n      </View>\n    </Layout>\n  );\n};\n\ninterface GridItemProps {\n  index: number;\n  state: \"ZERO\" | \"CROSS\" | undefined;\n  onPress: (index: number) => void;\n  isWinningIndex: boolean;\n}\nconst GridItem: React.FC<GridItemProps> = ({\n  state,\n  index,\n  onPress,\n  isWinningIndex,\n}) => (\n  <TouchableOpacity\n    onPress={() => onPress(index)}\n    style={{\n      backgroundColor: \"#2c3045\",\n      height: 98,\n      width: 98,\n      margin: 1,\n      borderRadius: 6,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    }}\n    activeOpacity={1}\n  >\n    {state !== undefined ? (\n      <Text\n        style={{\n          width: \"100%\",\n          textAlign: \"center\",\n          fontSize: isWinningIndex ? 65 : 55,\n          fontFamily: Font.FontName,\n          color: ForegroundColor,\n          textShadowColor: isWinningIndex ? ForegroundColor : undefined,\n          textShadowOffset: isWinningIndex\n            ? { width: -1, height: 1 }\n            : undefined,\n          textShadowRadius: isWinningIndex ? 15 : undefined,\n        }}\n      >\n        {state === \"CROSS\" ? \"X\" : \"O\"}\n      </Text>\n    ) : (\n      <></>\n    )}\n  </TouchableOpacity>\n);\n\nexport default GameScreen;\n","import React from \"react\";\n\nimport { useFonts } from \"expo-font\";\nimport AppLoading from \"expo-app-loading\";\nimport { StatusBar } from \"expo-status-bar\";\n\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\n\nimport HomeScreen from \"./src/screens/HomeScreen\";\nimport GameScreen from \"./src/screens/GameScreen\";\n\nimport { StackParamList } from \"./src/Types\";\nimport { Font } from \"./src/common/Const\";\n\nconst Stack = createStackNavigator<StackParamList>();\n\nconst App = () => {\n  const [fontLoaded] = useFonts({\n    [Font.FontName]: Font.FontFile,\n  });\n\n  if (!fontLoaded) {\n    return <AppLoading />;\n  }\n\n  return (\n    <>\n      <NavigationContainer>\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n          <Stack.Screen name=\"HomeScreen\" component={HomeScreen} />\n          <Stack.Screen name=\"GameScreen\" component={GameScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n      <StatusBar style=\"light\" />\n    </>\n  );\n};\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"./fonts/Kanit-Bold.ttf\";","module.exports = __webpack_public_path__ + \"static/media/ForkOnGithub.0c95a7c5.png\";","module.exports = __webpack_public_path__ + \"static/media/Move_Sound.3e2b8a36.wav\";","module.exports = __webpack_public_path__ + \"static/media/Game_Draw.183e2b8a.wav\";","module.exports = __webpack_public_path__ + \"static/media/Game_Won.9b5b1a62.wav\";"],"sourceRoot":""}