{"version":3,"sources":["assets/Fonts/Kanit-Bold.ttf","assets/ForkOnGithub.png","assets/splash.png","assets/Sounds/Move_Sound.wav","assets/Sounds/Game_Draw.wav","assets/Sounds/Game_Won.wav","src/common/Const.ts","src/common/Utils.ts","src/components/Layout.tsx","src/components/Button.tsx","src/components/Divider.tsx","src/components/GridItem.tsx","src/components/GameModeSelector.tsx","src/screens/GameScreen.tsx","App.tsx"],"names":["module","exports","Font","FontName","FontFile","require","Images","ForkOnGithub","Splash","Sounds","Move_Sound","Game_Draw","Game_Won","Utils","Sleep","seconds","Promise","resolve","reject","setTimeout","PlaySound","audio","a","async","Audio","Sound","createAsync","sound","playAsync","IsOnWeb","Platform","OS","Layout","children","style","View","backgroundColor","flex","alignItems","SafeAreaView","width","maxWidth","padding","Pressable","position","top","right","onPress","Linking","openURL","Image","source","height","Button","title","borderRadius","justifyContent","marginVertical","marginHorizontal","Text","fontFamily","fontSize","color","textAlign","Divider","GridItem","state","index","isWinningIndex","margin","activeOpacity","undefined","textShadowColor","textShadowOffset","textShadowRadius","GameModeSelector","isSelected","disabled","borderWidth","borderColor","winArrays","GameScreen","useState","gameWith","setGameWith","turn","setTurn","Array","grids","setGrids","gameState","setGameState","winner","setWinner","winningIndexes","setWinningIndexes","useEffect","includes","didSomeoneWon","checkWinner","onBotsTurn","emptyIndexes","map","grid","push","botSelectedIndex","Math","floor","random","length","onGridPress","winningIndexArray","filter","winArr","first","second","third","firstWinArray","byBot","canGameContinue","isValidTurn","newGrids","isGameStarted","v","isInWinIndex","flat","flexDirection","emoji","text","getTurnLabelText","i","ind1","ind2","ind3","App","isFontLoaded","setIsFontLoaded","SplashScreen","Fonts","StatusBar","resizeMode"],"mappings":"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","file":"static/js/app.d79350e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"./fonts/Kanit-Bold.ttf\";","module.exports = __webpack_public_path__ + \"static/media/ForkOnGithub.0c95a7c5.png\";","module.exports = __webpack_public_path__ + \"static/media/splash.8d4371ce.png\";","module.exports = __webpack_public_path__ + \"static/media/Move_Sound.3e2b8a36.wav\";","module.exports = __webpack_public_path__ + \"static/media/Game_Draw.183e2b8a.wav\";","module.exports = __webpack_public_path__ + \"static/media/Game_Won.9b5b1a62.wav\";","const BackgroundColor = \"#212845\";\nconst ForegroundColor = \"#F8D332\";\n\nexport { BackgroundColor, ForegroundColor };\n\nexport const Font = {\n  FontName: \"Kanit-Bold\",\n  FontFile: require(\"../../assets/Fonts/Kanit-Bold.ttf\"),\n};\n\nexport const Images = {\n  ForkOnGithub: require(\"../../assets/ForkOnGithub.png\"),\n  Splash: require(\"../../assets/splash.png\"),\n};\n\nexport const Sounds = {\n  Move_Sound: require(\"../../assets/Sounds/Move_Sound.wav\"),\n  Game_Draw: require(\"../../assets/Sounds/Game_Draw.wav\"),\n  Game_Won: require(\"../../assets/Sounds/Game_Won.wav\"),\n};\n","import { Platform } from \"react-native\";\nimport { Audio } from \"expo-av\";\nimport { AVPlaybackSource } from \"expo-av/build/AV\";\n\nexport default class Utils {\n  //#region Utilities\n  static Sleep = (seconds = 1) => {\n    return new Promise<void>((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, seconds * 1000);\n    });\n  };\n\n  static PlaySound = async (audio: AVPlaybackSource) => {\n    const { sound } = await Audio.Sound.createAsync(audio);\n    await sound.playAsync();\n  };\n\n  static IsOnWeb = () => Platform.OS === \"web\";\n}\n","import {\n  View,\n  SafeAreaView,\n  ViewStyle,\n  Image,\n  Pressable,\n  Linking,\n} from \"react-native\";\n\nimport Utils from \"../common/Utils\";\nimport { BackgroundColor, Images } from \"../common/Const\";\n\ninterface LayoutProps {\n  style?: ViewStyle;\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children, style }) => {\n  return (\n    <View\n      style={{\n        backgroundColor: BackgroundColor,\n        flex: 1,\n        alignItems: \"center\",\n      }}\n    >\n      <SafeAreaView\n        style={{\n          flex: 1,\n          width: \"100%\",\n          maxWidth: 480,\n          padding: 15,\n          ...style,\n        }}\n      >\n        {children}\n      </SafeAreaView>\n      {Utils.IsOnWeb() && (\n        <Pressable\n          style={{\n            position: \"absolute\",\n            top: 0,\n            right: 0,\n          }}\n          onPress={() => {\n            Linking.openURL(\"https://github.com/YahyaBagia/TicTacToe-Expo\");\n          }}\n        >\n          <Image\n            source={Images.ForkOnGithub}\n            style={{ width: 130, height: 130 }}\n          />\n        </Pressable>\n      )}\n    </View>\n  );\n};\n\nexport default Layout;\n","import { Pressable, Text, ViewStyle } from \"react-native\";\n\nimport { Font, ForegroundColor } from \"../common/Const\";\n\ninterface ButtonProps {\n  title: string;\n  onPress?: () => void;\n  style?: ViewStyle;\n}\n\nconst Button: React.FC<ButtonProps> = ({ title, onPress, style }) => {\n  return (\n    <Pressable\n      onPress={onPress}\n      style={{\n        height: 60,\n        backgroundColor: ForegroundColor,\n        borderRadius: 5,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginVertical: 10,\n        marginHorizontal: 10,\n        flex: 1,\n        ...style,\n      }}\n    >\n      <Text\n        style={{\n          fontFamily: Font.FontName,\n          fontSize: 25,\n          color: \"#333027\",\n          textAlign: \"center\",\n        }}\n      >\n        {title}\n      </Text>\n    </Pressable>\n  );\n};\n\nexport default Button;\n","import { View } from \"react-native\";\n\nimport { ForegroundColor } from \"../common/Const\";\n\nconst Divider = () => {\n  return (\n    <View\n      style={{\n        backgroundColor: ForegroundColor,\n        height: 2,\n        marginVertical: 10,\n      }}\n    />\n  );\n};\n\nexport default Divider;\n","import { Text, Pressable } from \"react-native\";\nimport { Font, ForegroundColor } from \"../common/Const\";\n\ninterface GridItemProps {\n  index: number;\n  state: \"ZERO\" | \"CROSS\" | undefined;\n  onPress: (index: number) => void;\n  isWinningIndex: boolean;\n}\nconst GridItem: React.FC<GridItemProps> = ({\n  state,\n  index,\n  onPress,\n  isWinningIndex,\n}) => (\n  <Pressable\n    onPress={() => onPress(index)}\n    style={{\n      backgroundColor: \"#2c3045\",\n      height: 98,\n      width: 98,\n      margin: 1,\n      borderRadius: 6,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    }}\n    activeOpacity={1}\n  >\n    {state !== undefined ? (\n      <Text\n        style={{\n          width: \"100%\",\n          textAlign: \"center\",\n          fontSize: isWinningIndex ? 65 : 55,\n          fontFamily: Font.FontName,\n          color: ForegroundColor,\n          textShadowColor: isWinningIndex ? ForegroundColor : undefined,\n          textShadowOffset: isWinningIndex\n            ? { width: -1, height: 1 }\n            : undefined,\n          textShadowRadius: isWinningIndex ? 15 : undefined,\n        }}\n      >\n        {state === \"CROSS\" ? \"X\" : \"O\"}\n      </Text>\n    ) : (\n      <></>\n    )}\n  </Pressable>\n);\n\nexport default GridItem;\n","import { Pressable, Text, ViewStyle } from \"react-native\";\n\nimport { Font, ForegroundColor } from \"../common/Const\";\n\ninterface GameModeSelectorProps {\n  title: string;\n  onPress?: () => void;\n  isSelected: boolean;\n  disabled: boolean;\n  style?: ViewStyle;\n}\n\nconst GameModeSelector: React.FC<GameModeSelectorProps> = ({\n  title,\n  onPress,\n  isSelected,\n  disabled,\n  style,\n}) => {\n  return (\n    <Pressable\n      onPress={onPress}\n      style={{\n        height: 44,\n        backgroundColor: isSelected ? ForegroundColor : \"transparent\",\n        borderRadius: 5,\n        borderWidth: 2,\n        borderColor: ForegroundColor,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginVertical: 8,\n        marginHorizontal: 4,\n        flex: 1,\n        ...style,\n      }}\n      disabled={disabled}\n    >\n      <Text\n        style={{\n          fontFamily: Font.FontName,\n          fontSize: 22,\n          color: isSelected ? \"#333027\" : ForegroundColor,\n          textAlign: \"center\",\n        }}\n      >\n        {title}\n      </Text>\n    </Pressable>\n  );\n};\n\nexport default GameModeSelector;\n","import { useState, useEffect } from \"react\";\nimport { View, Text } from \"react-native\";\n\nimport Utils from \"../common/Utils\";\nimport { Font, ForegroundColor, Sounds } from \"../common/Const\";\n\nimport Layout from \"../components/Layout\";\nimport Button from \"../components/Button\";\nimport Divider from \"../components/Divider\";\nimport GridItem from \"../components/GridItem\";\nimport GameModeSelector from \"../components/GameModeSelector\";\n\nconst winArrays = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst GameScreen: React.FC = () => {\n  const [gameWith, setGameWith] = useState<\"Bot\" | \"Player\">(\"Bot\");\n\n  const [turn, setTurn] = useState<\"CROSS\" | \"ZERO\">(\"CROSS\");\n  const [grids, setGrids] = useState<Array<\"CROSS\" | \"ZERO\" | undefined>>([\n    ...new Array(9),\n  ]);\n  const [gameState, setGameState] = useState<\"Game Over\" | \"Game Draw\" | \"\">(\n    \"\"\n  );\n  const [winner, setWinner] = useState<\"CROSS\" | \"ZERO\" | undefined>(undefined);\n  const [winningIndexes, setWinningIndexes] = useState<Array<Array<number>>>(\n    []\n  );\n\n  useEffect(() => {\n    if (grids.includes(\"CROSS\") === false && grids.includes(\"ZERO\") === false) {\n      return;\n    }\n\n    const didSomeoneWon = checkWinner();\n    if (didSomeoneWon) {\n      setGameState(\"Game Over\");\n    } else if (didSomeoneWon === false && grids.includes(undefined) === false) {\n      setGameState(\"Game Draw\");\n    } else {\n      setTurn(turn === \"CROSS\" ? \"ZERO\" : \"CROSS\");\n    }\n  }, [grids]);\n\n  useEffect(() => {\n    //CHECK IF PLAYING AGAINTS BOT\n    if (turn === \"ZERO\" && gameWith === \"Bot\") {\n      onBotsTurn();\n    }\n  }, [turn]);\n\n  useEffect(() => {\n    if (gameState === \"Game Over\") {\n      Utils.PlaySound(Sounds.Game_Won);\n    } else if (gameState === \"Game Draw\") {\n      Utils.PlaySound(Sounds.Game_Draw);\n    }\n  }, [gameState]);\n\n  const onBotsTurn = async () => {\n    await Utils.Sleep();\n    //TAKE TURN AUTOMATICALLY\n    let emptyIndexes: number[] = [];\n    grids.map((grid, index) => {\n      if (grid === undefined) {\n        emptyIndexes.push(index);\n      }\n    });\n\n    const botSelectedIndex = Math.floor(Math.random() * emptyIndexes.length);\n    onGridPress(emptyIndexes[botSelectedIndex], true);\n  };\n\n  const checkWinner = (): boolean => {\n    const winningIndexArray = winArrays.filter((winArr) => {\n      const [first, second, third] = winArr;\n      if (\n        grids[first] !== undefined &&\n        grids[first] === grids[second] &&\n        grids[second] === grids[third]\n      ) {\n        return winArr;\n      }\n    });\n\n    if (winningIndexArray.length > 0) {\n      const [firstWinArray] = winningIndexArray;\n      const winner = grids[firstWinArray[0]];\n      setWinner(winner);\n      setWinningIndexes(winningIndexArray);\n      return true;\n    }\n    return false;\n  };\n\n  const onGridPress = (index: number, byBot?: boolean) => {\n    const canGameContinue = gameState.length === 0;\n    let isValidTurn = true;\n    if (gameWith === \"Bot\" && turn === \"ZERO\" && !byBot) {\n      isValidTurn = false;\n    }\n\n    if (canGameContinue && isValidTurn && grids[index] === undefined) {\n      let newGrids = [...grids];\n      newGrids[index] = turn;\n      setGrids([...newGrids]);\n      Utils.PlaySound(Sounds.Move_Sound);\n    }\n  };\n\n  const onReset = () => {\n    setTurn(\"CROSS\");\n    setGrids([...new Array(9)]);\n    setGameState(\"\");\n    setWinner(undefined);\n    setWinningIndexes([]);\n  };\n\n  const isGameStarted = (): boolean => {\n    return grids.filter((v) => v !== undefined).length !== 0;\n  };\n\n  const getTurnLabelText = (): string => {\n    let emoji = \"\",\n      text = \"\";\n    if (gameState === \"\") {\n      if (turn === \"CROSS\") {\n        if (gameWith === \"Bot\") {\n          text = \"Your Turn\";\n        } else {\n          text = \"X's Turn\";\n        }\n      } else {\n        if (gameWith === \"Bot\") {\n          text = \"Bot's Turn\";\n        } else {\n          text = \"O's Turn\";\n        }\n      }\n    } else if (gameState === \"Game Over\") {\n      emoji = \"⭐\";\n      if (winner === \"CROSS\") {\n        if (gameWith === \"Bot\") {\n          text = \" You Won \";\n        } else {\n          text = \" X Won \";\n        }\n      } else {\n        if (gameWith === \"Bot\") {\n          text = \" Bot Won \";\n        } else {\n          text = \" O Won \";\n        }\n      }\n    } else {\n      emoji = \"😑\";\n      text = \" Draw \";\n    }\n    return `${emoji}${text}${emoji}`;\n  };\n\n  const isInWinIndex = (index: number): boolean => {\n    const winIn = winningIndexes.flat();\n    return winIn.includes(index);\n  };\n\n  return (\n    <Layout style={{ justifyContent: \"center\" }}>\n      <View>\n        <Text\n          style={{\n            fontFamily: Font.FontName,\n            fontSize: 26,\n            color: ForegroundColor,\n            textAlign: \"center\",\n          }}\n        >\n          Opponent\n        </Text>\n        <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\n          <GameModeSelector\n            title=\"Friend\"\n            onPress={() => setGameWith(\"Player\")}\n            isSelected={gameWith === \"Player\"}\n            disabled={isGameStarted()}\n          />\n          <GameModeSelector\n            title=\"Bot\"\n            onPress={() => setGameWith(\"Bot\")}\n            isSelected={gameWith === \"Bot\"}\n            disabled={isGameStarted()}\n          />\n        </View>\n        <Divider />\n      </View>\n      <Text\n        style={{\n          fontFamily: Font.FontName,\n          fontSize: 40,\n          color: ForegroundColor,\n          textAlign: \"center\",\n        }}\n      >\n        {getTurnLabelText()}\n      </Text>\n      <View\n        style={{\n          marginVertical: 12,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <View\n          style={{\n            width: 300,\n            height: 300,\n            backgroundColor: \"#2369EE\",\n            borderRadius: 6,\n          }}\n        >\n          {[\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n          ].map(([ind1, ind2, ind3], i) => (\n            <View style={{ flexDirection: \"row\" }} key={`${i}`}>\n              <GridItem\n                index={ind1}\n                onPress={onGridPress}\n                state={grids[ind1]}\n                isWinningIndex={isInWinIndex(ind1)}\n              />\n              <GridItem\n                index={ind2}\n                onPress={onGridPress}\n                state={grids[ind2]}\n                isWinningIndex={isInWinIndex(ind2)}\n              />\n              <GridItem\n                index={ind3}\n                onPress={onGridPress}\n                state={grids[ind3]}\n                isWinningIndex={isInWinIndex(ind3)}\n              />\n            </View>\n          ))}\n        </View>\n      </View>\n      <Divider />\n      <View style={{ flexDirection: \"row\" }}>\n        <Button title={\"Reset\"} onPress={onReset} />\n      </View>\n    </Layout>\n  );\n};\n\nexport default GameScreen;\n","import { useEffect, useState } from \"react\";\nimport { View, Image } from \"react-native\";\n\nimport * as Fonts from \"expo-font\";\nimport { StatusBar } from \"expo-status-bar\";\nimport * as SplashScreen from \"expo-splash-screen\";\n\nimport { BackgroundColor, Font, Images } from \"./src/common/Const\";\n\nimport GameScreen from \"./src/screens/GameScreen\";\nimport Utils from \"./src/common/Utils\";\n\nconst App = () => {\n  const [isFontLoaded, setIsFontLoaded] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      await SplashScreen.preventAutoHideAsync();\n      await Fonts.loadAsync({\n        [Font.FontName]: Font.FontFile,\n      });\n      await Utils.Sleep(2);\n      setIsFontLoaded(true);\n      await SplashScreen.hideAsync();\n    })();\n  }, []);\n\n  if (!isFontLoaded)\n    return (\n      <View style={{ flex: 1, backgroundColor: BackgroundColor }}>\n        <Image\n          source={Images.Splash}\n          style={{ height: \"100%\", width: \"100%\" }}\n          resizeMode={\"contain\"}\n        />\n      </View>\n    );\n\n  return (\n    <>\n      <GameScreen />\n      <StatusBar style=\"light\" />\n    </>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}