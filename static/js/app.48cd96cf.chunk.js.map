{"version":3,"sources":["src/components/Layout.tsx","src/common/Const.ts","src/components/Button.tsx","src/screens/HomeScreen.tsx","src/screens/GameScreen.tsx","App.tsx","web-build/register-service-worker.js","assets/Pacifico-Regular.ttf"],"names":["Layout","children","style","View","backgroundColor","flex","alignItems","SafeAreaView","width","Platform","OS","padding","Button","title","onPress","TouchableOpacity","height","borderRadius","justifyContent","Text","fontFamily","fontSize","color","textAlign","fontWeight","HomeScreen","navigation","push","gameWith","marginVertical","marginHorizontal","GridItem","state","index","isWinningIndex","event","margin","textShadowColor","undefined","textShadowOffset","textShadowRadius","GameScreen","route","params","useState","turn","setTurn","grids","setGrids","gameState","setGameState","winner","setWinner","winningIndexes","setWinningIndexes","useEffect","includes","didSomeoneWon","checkWinner","onBotsTurn","sleep","seconds","Promise","resolve","reject","setTimeout","a","async","emptyIndexes","map","grid","botSelectedIndex","Math","floor","random","length","onGridPress","byBot","canGameContinue","isValidTurn","isGridEmpty","newGrids","flexDirection","goBack","Stack","createStackNavigator","App","useFonts","BlockheadDude","require","NavigationContainer","Navigator","headerMode","Screen","name","component","AppLoading","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","module","exports"],"mappings":"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","file":"static/js/app.48cd96cf.chunk.js","sourcesContent":["import React from \"react\";\nimport { View, SafeAreaView, ViewStyle, Platform } from \"react-native\";\nimport { BackgroundColor } from \"../common/Const\";\n\ninterface LayoutProps {\n  style?: ViewStyle;\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children, style }) => {\n  return (\n    <View style={{ backgroundColor: \"#373d57\", flex: 1, alignItems: \"center\" }}>\n      <SafeAreaView\n        style={{\n          backgroundColor: BackgroundColor,\n          flex: 1,\n          width: Platform.OS === \"web\" ? 480 : \"100%\",\n          padding: 15,\n          ...style,\n        }}\n      >\n        {children}\n      </SafeAreaView>\n    </View>\n  );\n};\n\nexport default Layout;\n","const FontFamily = \"BlockheadDude\";\nconst BackgroundColor = \"212845\";\nconst ForegroundColor = \"#F8D332\";\n\nexport { FontFamily, BackgroundColor, ForegroundColor };\n","import React from \"react\";\nimport { TouchableOpacity, Text, ViewStyle } from \"react-native\";\n\nimport { FontFamily, ForegroundColor } from \"../common/Const\";\n\ninterface ButtonProps {\n  title: string;\n  onPress?: () => void;\n  style?: ViewStyle;\n}\n\nconst Button: React.FC<ButtonProps> = ({ title, onPress, style }) => {\n  return (\n    <TouchableOpacity\n      onPress={onPress}\n      style={{\n        height: 60,\n        backgroundColor: ForegroundColor,\n        borderRadius: 5,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        ...style,\n      }}\n    >\n      <Text\n        style={{\n          fontFamily: FontFamily,\n          fontSize: 25,\n          color: \"#333027\",\n          textAlign: \"center\",\n          fontWeight: \"bold\",\n        }}\n      >\n        {title}\n      </Text>\n    </TouchableOpacity>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport { Text, View } from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\n\nimport Layout from \"../components/Layout\";\nimport { FontFamily } from \"../common/Const\";\nimport Button from \"../components/Button\";\n\nimport { StackParamList } from \"../Types\";\n\ntype HomeScreenNavigationProps = StackNavigationProp<\n  StackParamList,\n  \"HomeScreen\"\n>;\n\ntype HomeScreenProps = {\n  navigation: HomeScreenNavigationProps;\n};\n\nconst HomeScreen: React.FC<HomeScreenProps> = ({ navigation }) => {\n  return (\n    <Layout style={{ justifyContent: \"center\" }}>\n      <View style={{ height: \"50%\", justifyContent: \"center\" }}>\n        <Text\n          style={{\n            fontFamily: FontFamily,\n            fontSize: 60,\n            color: \"white\",\n            textAlign: \"center\",\n          }}\n        >\n          Tic-Tac-Toe\n        </Text>\n      </View>\n\n      <View style={{ height: \"50%\" }}>\n        <Button\n          title={\"Play with Bot\"}\n          onPress={() => {\n            navigation.push(\"GameScreen\", { gameWith: \"Bot\" });\n          }}\n          style={{ marginVertical: 10, marginHorizontal: 10 }}\n        />\n        <Button\n          title={\"Play with Friend\"}\n          onPress={() => {\n            navigation.push(\"GameScreen\", { gameWith: \"Player\" });\n          }}\n          style={{ marginVertical: 10, marginHorizontal: 10 }}\n        />\n      </View>\n    </Layout>\n  );\n};\n\nexport default HomeScreen;\n","import React, { useState, useEffect } from \"react\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { View, Text, GestureResponderEvent } from \"react-native\";\nimport { TouchableWithoutFeedback } from \"react-native-gesture-handler\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\n\nimport { StackParamList } from \"../Types\";\nimport { ForegroundColor, FontFamily } from \"../common/Const\";\nimport Layout from \"../components/Layout\";\nimport Button from \"../components/Button\";\n\ntype GameScreenNavigationProps = StackNavigationProp<\n  StackParamList,\n  \"GameScreen\"\n>;\n\ntype GameScreenRouteProp = RouteProp<StackParamList, \"GameScreen\">;\n\ntype GameScreenProps = {\n  navigation: GameScreenNavigationProps;\n  route: GameScreenRouteProp;\n};\n\nconst GameScreen: React.FC<GameScreenProps> = ({ navigation, route }) => {\n  const { gameWith = \"Bot\" } = route.params;\n\n  const [turn, setTurn] = useState<\"CROSS\" | \"ZERO\">(\"CROSS\");\n  const [grids, setGrids] = useState<Array<\"CROSS\" | \"ZERO\" | \"EMPTY\">>([\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n  ]);\n  const [gameState, setGameState] = useState<\"Game Over\" | \"Game Draw\" | \"\">(\n    \"\"\n  );\n  const [winner, setWinner] = useState<\"CROSS\" | \"ZERO\" | undefined>(undefined);\n  const [winningIndexes, setWinningIndexes] = useState<number[]>([]);\n\n  useEffect(() => {\n    if (grids.includes(\"CROSS\") === false && grids.includes(\"ZERO\") === false) {\n      return;\n    }\n\n    //CHECK WIN LOGIC\n    const didSomeoneWon = checkWinner();\n    //CHECK IF GAME DRAW\n    if (didSomeoneWon) {\n      setGameState(\"Game Over\");\n    } else if (didSomeoneWon === false && grids.includes(\"EMPTY\") === false) {\n      setGameState(\"Game Draw\");\n    } else {\n      setTurn(turn === \"CROSS\" ? \"ZERO\" : \"CROSS\");\n    }\n  }, [grids]);\n\n  useEffect(() => {\n    //CHECK IF PLAYING AGAINTS BOT\n    if (turn === \"ZERO\" && gameWith === \"Bot\") {\n      onBotsTurn();\n    }\n  }, [turn]);\n\n  const sleep = (seconds = 1) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve();\n      }, seconds * 1000);\n    });\n  };\n\n  const onBotsTurn = async () => {\n    await sleep();\n    //TAKE TURN AUTOMATICALLY\n    let emptyIndexes: number[] = [];\n    grids.map((grid, index) => {\n      if (grid === \"EMPTY\") {\n        emptyIndexes.push(index);\n      }\n    });\n\n    const botSelectedIndex = Math.floor(Math.random() * emptyIndexes.length);\n    onGridPress(emptyIndexes[botSelectedIndex], true);\n  };\n\n  const checkWinner = (): boolean => {\n    if (\n      grids[0] !== \"EMPTY\" &&\n      grids[0] === grids[1] &&\n      grids[1] === grids[2]\n    ) {\n      setWinner(grids[0]);\n      setWinningIndexes([0, 1, 2]);\n      return true;\n    } else if (\n      grids[3] !== \"EMPTY\" &&\n      grids[3] === grids[4] &&\n      grids[4] === grids[5]\n    ) {\n      setWinner(grids[3]);\n      setWinningIndexes([3, 4, 5]);\n      return true;\n    } else if (\n      grids[6] !== \"EMPTY\" &&\n      grids[6] === grids[7] &&\n      grids[7] === grids[8]\n    ) {\n      setWinner(grids[6]);\n      setWinningIndexes([6, 7, 8]);\n      return true;\n    } else if (\n      grids[0] !== \"EMPTY\" &&\n      grids[0] === grids[3] &&\n      grids[3] === grids[6]\n    ) {\n      setWinner(grids[0]);\n      setWinningIndexes([0, 3, 6]);\n      return true;\n    } else if (\n      grids[1] !== \"EMPTY\" &&\n      grids[1] === grids[4] &&\n      grids[4] === grids[7]\n    ) {\n      setWinner(grids[1]);\n      setWinningIndexes([1, 4, 7]);\n      return true;\n    } else if (\n      grids[2] !== \"EMPTY\" &&\n      grids[2] === grids[5] &&\n      grids[5] === grids[8]\n    ) {\n      setWinner(grids[2]);\n      setWinningIndexes([2, 5, 8]);\n      return true;\n    } else if (\n      grids[0] !== \"EMPTY\" &&\n      grids[0] === grids[4] &&\n      grids[4] === grids[8]\n    ) {\n      setWinner(grids[0]);\n      setWinningIndexes([0, 4, 8]);\n      return true;\n    } else if (\n      grids[2] !== \"EMPTY\" &&\n      grids[2] === grids[4] &&\n      grids[4] === grids[6]\n    ) {\n      setWinner(grids[2]);\n      setWinningIndexes([2, 4, 6]);\n      return true;\n    }\n    return false;\n  };\n\n  const onGridPress = (index: number, byBot?: boolean) => {\n    const canGameContinue = gameState.length === 0;\n    let isValidTurn = true;\n    if (gameWith === \"Bot\" && turn === \"ZERO\" && !byBot) {\n      isValidTurn = false;\n    }\n    const isGridEmpty = grids[index] === \"EMPTY\";\n\n    if (canGameContinue && isValidTurn && isGridEmpty) {\n      let newGrids = [...grids];\n      newGrids[index] = turn;\n      setGrids([...newGrids]);\n    }\n  };\n\n  const onReset = () => {\n    setTurn(\"CROSS\");\n    setGrids([\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n    ]);\n    setGameState(\"\");\n    setWinner(undefined);\n    setWinningIndexes([]);\n  };\n\n  return (\n    <Layout style={{ justifyContent: \"center\" }}>\n      <Text\n        style={{\n          fontFamily: FontFamily,\n          fontSize: 45,\n          fontWeight: \"bold\",\n          color: ForegroundColor,\n          textAlign: \"center\",\n        }}\n      >\n        {gameState === \"\"\n          ? turn === \"CROSS\"\n            ? \"X's Turn\"\n            : \"O's Turn\"\n          : gameState === \"Game Over\"\n          ? winner === \"CROSS\"\n            ? \"⭐ X Won ⭐\"\n            : \"⭐ O Won ⭐\"\n          : \"😑 Draw 😑\"}\n      </Text>\n      <View\n        style={{\n          marginVertical: 20,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <View\n          style={{\n            width: 300,\n            height: 300,\n            backgroundColor: \"#2369EE\",\n            borderRadius: 6,\n          }}\n        >\n          <View style={{ flexDirection: \"row\" }}>\n            <GridItem\n              index={0}\n              onPress={onGridPress}\n              state={grids[0]}\n              isWinningIndex={winningIndexes.includes(0)}\n            />\n            <GridItem\n              index={1}\n              onPress={onGridPress}\n              state={grids[1]}\n              isWinningIndex={winningIndexes.includes(1)}\n            />\n            <GridItem\n              index={2}\n              onPress={onGridPress}\n              state={grids[2]}\n              isWinningIndex={winningIndexes.includes(2)}\n            />\n          </View>\n          <View style={{ flexDirection: \"row\" }}>\n            <GridItem\n              index={3}\n              onPress={onGridPress}\n              state={grids[3]}\n              isWinningIndex={winningIndexes.includes(3)}\n            />\n            <GridItem\n              index={4}\n              onPress={onGridPress}\n              state={grids[4]}\n              isWinningIndex={winningIndexes.includes(4)}\n            />\n            <GridItem\n              index={5}\n              onPress={onGridPress}\n              state={grids[5]}\n              isWinningIndex={winningIndexes.includes(5)}\n            />\n          </View>\n          <View style={{ flexDirection: \"row\" }}>\n            <GridItem\n              index={6}\n              onPress={onGridPress}\n              state={grids[6]}\n              isWinningIndex={winningIndexes.includes(6)}\n            />\n            <GridItem\n              index={7}\n              onPress={onGridPress}\n              state={grids[7]}\n              isWinningIndex={winningIndexes.includes(7)}\n            />\n            <GridItem\n              index={8}\n              onPress={onGridPress}\n              state={grids[8]}\n              isWinningIndex={winningIndexes.includes(8)}\n            />\n          </View>\n        </View>\n      </View>\n      <View style={{ flexDirection: \"row\" }}>\n        <Button\n          title={\"Reset\"}\n          onPress={onReset}\n          style={{ marginVertical: 10, marginHorizontal: 10, flex: 1 }}\n        />\n        <Button\n          title={\"Exit\"}\n          onPress={navigation.goBack}\n          style={{ marginVertical: 10, marginHorizontal: 10, flex: 1 }}\n        />\n      </View>\n    </Layout>\n  );\n};\n\ninterface GridItemProps {\n  index: number;\n  state: \"ZERO\" | \"CROSS\" | \"EMPTY\";\n  onPress: (index: number) => void;\n  isWinningIndex: boolean;\n}\nconst GridItem: React.FC<GridItemProps> = ({\n  state,\n  index,\n  onPress,\n  isWinningIndex,\n}) => (\n  <TouchableWithoutFeedback\n    onPress={(event: GestureResponderEvent) => onPress(index)}\n    style={{\n      backgroundColor: \"#2c3045\",\n      height: 98,\n      width: 98,\n      margin: 1,\n      borderRadius: 6,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    }}\n  >\n    {state !== \"EMPTY\" && (\n      <Text\n        style={{\n          width: \"100%\",\n          textAlign: \"center\",\n          fontFamily: FontFamily,\n          fontSize: isWinningIndex ? 60 : 50,\n          fontWeight: \"bold\",\n          color: ForegroundColor,\n          textShadowColor: isWinningIndex ? ForegroundColor : undefined,\n          textShadowOffset: isWinningIndex\n            ? { width: -1, height: 1 }\n            : undefined,\n          textShadowRadius: isWinningIndex ? 15 : undefined,\n        }}\n      >\n        {state === \"CROSS\" ? \"X\" : \"O\"}\n      </Text>\n    )}\n  </TouchableWithoutFeedback>\n);\n\nexport default GameScreen;\n","import React from \"react\";\nimport { AppLoading } from \"expo\";\nimport { useFonts } from \"expo-font\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\n\nimport HomeScreen from \"./src/screens/HomeScreen\";\nimport GameScreen from \"./src/screens/GameScreen\";\n\nimport { StackParamList } from \"./src/Types\";\n\nconst Stack = createStackNavigator<StackParamList>();\n\nconst App = () => {\n  let [fontsLoaded] = useFonts({\n    BlockheadDude: require(\"./assets/Pacifico-Regular.ttf\"),\n  });\n\n  if (!fontsLoaded) {\n    return <AppLoading />;\n  } else {\n    return (\n      <NavigationContainer>\n        <Stack.Navigator headerMode={\"none\"}>\n          <Stack.Screen name=\"HomeScreen\" component={HomeScreen} />\n          <Stack.Screen name=\"GameScreen\" component={GameScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    );\n  }\n};\n\nexport default App;\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/tic-tac-toe-expo/expo-service-worker.js', { scope: '/tic-tac-toe-expo/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/Pacifico-Regular.ttf\";"],"sourceRoot":""}