{"version":3,"sources":["src/components/Layout.tsx","src/common/Const.ts","src/components/Button.tsx","src/screens/HomeScreen.tsx","src/screens/GameScreen.tsx","App.tsx","assets/ForkOnGithub.png","assets/Pacifico-Regular.ttf"],"names":["width","Dimensions","get","Layout","children","style","View","backgroundColor","flex","alignItems","SafeAreaView","Platform","OS","padding","TouchableOpacity","position","top","right","onPress","Linking","openURL","Image","source","require","height","Button","title","borderRadius","justifyContent","Text","fontFamily","fontSize","color","textAlign","fontWeight","HomeScreen","navigation","push","gameWith","marginVertical","marginHorizontal","GridItem","state","index","isWinningIndex","event","margin","activeOpacity","textShadowColor","undefined","textShadowOffset","textShadowRadius","GameScreen","route","params","useState","turn","setTurn","grids","setGrids","gameState","setGameState","winner","setWinner","winningIndexes","setWinningIndexes","useEffect","includes","didSomeoneWon","checkWinner","onBotsTurn","sleep","seconds","Promise","resolve","reject","setTimeout","a","async","emptyIndexes","map","grid","botSelectedIndex","Math","floor","random","length","onGridPress","byBot","canGameContinue","isValidTurn","isGridEmpty","newGrids","flexDirection","goBack","Stack","createStackNavigator","App","useFonts","BlockheadDude","NavigationContainer","Navigator","headerMode","Screen","name","component","module","exports"],"mappings":"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","file":"static/js/app.f336e622.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  View,\n  SafeAreaView,\n  ViewStyle,\n  Platform,\n  Dimensions,\n  Image,\n  TouchableOpacity,\n  Linking,\n} from \"react-native\";\n\nimport { BackgroundColor } from \"../common/Const\";\n\nconst { width } = Dimensions.get(\"screen\");\n\ninterface LayoutProps {\n  style?: ViewStyle;\n}\n\nconst Layout: React.FC<LayoutProps> = ({ children, style }) => {\n  return (\n    <View style={{ backgroundColor: \"#373d57\", flex: 1, alignItems: \"center\" }}>\n      <SafeAreaView\n        style={{\n          backgroundColor: BackgroundColor,\n          flex: 1,\n          width: Platform.OS === \"web\" ? (width > 480 ? 480 : width) : \"100%\",\n          padding: 15,\n          ...style,\n        }}\n      >\n        {children}\n      </SafeAreaView>\n      <TouchableOpacity\n        style={{\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n        }}\n        onPress={() => {\n          Linking.openURL(\"https://github.com/YahyaBagia/TicTacToe-Expo\");\n        }}\n      >\n        <Image\n          source={require(\"../../assets/ForkOnGithub.png\")}\n          style={{ width: 130, height: 130 }}\n        />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nexport default Layout;\n","const FontFamily = \"BlockheadDude\";\nconst BackgroundColor = \"212845\";\nconst ForegroundColor = \"#F8D332\";\n\nexport { FontFamily, BackgroundColor, ForegroundColor };\n","import React from \"react\";\nimport { TouchableOpacity, Text, ViewStyle } from \"react-native\";\n\nimport { FontFamily, ForegroundColor } from \"../common/Const\";\n\ninterface ButtonProps {\n  title: string;\n  onPress?: () => void;\n  style?: ViewStyle;\n}\n\nconst Button: React.FC<ButtonProps> = ({ title, onPress, style }) => {\n  return (\n    <TouchableOpacity\n      onPress={onPress}\n      style={{\n        height: 60,\n        backgroundColor: ForegroundColor,\n        borderRadius: 5,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        ...style,\n      }}\n    >\n      <Text\n        style={{\n          fontFamily: FontFamily,\n          fontSize: 25,\n          color: \"#333027\",\n          textAlign: \"center\",\n          fontWeight: \"bold\",\n        }}\n      >\n        {title}\n      </Text>\n    </TouchableOpacity>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport { Text, View } from \"react-native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\n\nimport Layout from \"../components/Layout\";\nimport { FontFamily } from \"../common/Const\";\nimport Button from \"../components/Button\";\n\nimport { StackParamList } from \"../Types\";\n\ntype HomeScreenNavigationProps = StackNavigationProp<\n  StackParamList,\n  \"HomeScreen\"\n>;\n\ntype HomeScreenProps = {\n  navigation: HomeScreenNavigationProps;\n};\n\nconst HomeScreen: React.FC<HomeScreenProps> = ({ navigation }) => {\n  return (\n    <Layout style={{ justifyContent: \"center\" }}>\n      <View style={{ height: \"50%\", justifyContent: \"center\" }}>\n        <Text\n          style={{\n            fontFamily: FontFamily,\n            fontSize: 60,\n            color: \"white\",\n            textAlign: \"center\",\n          }}\n        >\n          Tic-Tac-Toe\n        </Text>\n      </View>\n\n      <View style={{ height: \"50%\" }}>\n        <Button\n          title={\"Play with Bot\"}\n          onPress={() => {\n            navigation.push(\"GameScreen\", { gameWith: \"Bot\" });\n          }}\n          style={{ marginVertical: 10, marginHorizontal: 10 }}\n        />\n        <Button\n          title={\"Play with Friend\"}\n          onPress={() => {\n            navigation.push(\"GameScreen\", { gameWith: \"Player\" });\n          }}\n          style={{ marginVertical: 10, marginHorizontal: 10 }}\n        />\n      </View>\n    </Layout>\n  );\n};\n\nexport default HomeScreen;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  GestureResponderEvent,\n  TouchableOpacity,\n} from \"react-native\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\n\nimport { StackParamList } from \"../Types\";\nimport { ForegroundColor, FontFamily } from \"../common/Const\";\nimport Layout from \"../components/Layout\";\nimport Button from \"../components/Button\";\n\ntype GameScreenNavigationProps = StackNavigationProp<\n  StackParamList,\n  \"GameScreen\"\n>;\n\ntype GameScreenRouteProp = RouteProp<StackParamList, \"GameScreen\">;\n\ntype GameScreenProps = {\n  navigation: GameScreenNavigationProps;\n  route: GameScreenRouteProp;\n};\n\nconst GameScreen: React.FC<GameScreenProps> = ({ navigation, route }) => {\n  const { gameWith = \"Bot\" } = route.params;\n\n  const [turn, setTurn] = useState<\"CROSS\" | \"ZERO\">(\"CROSS\");\n  const [grids, setGrids] = useState<Array<\"CROSS\" | \"ZERO\" | \"EMPTY\">>([\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n    \"EMPTY\",\n  ]);\n  const [gameState, setGameState] = useState<\"Game Over\" | \"Game Draw\" | \"\">(\n    \"\"\n  );\n  const [winner, setWinner] = useState<\"CROSS\" | \"ZERO\" | undefined>(undefined);\n  const [winningIndexes, setWinningIndexes] = useState<number[]>([]);\n\n  useEffect(() => {\n    if (grids.includes(\"CROSS\") === false && grids.includes(\"ZERO\") === false) {\n      return;\n    }\n\n    //CHECK WIN LOGIC\n    const didSomeoneWon = checkWinner();\n    //CHECK IF GAME DRAW\n    if (didSomeoneWon) {\n      setGameState(\"Game Over\");\n    } else if (didSomeoneWon === false && grids.includes(\"EMPTY\") === false) {\n      setGameState(\"Game Draw\");\n    } else {\n      setTurn(turn === \"CROSS\" ? \"ZERO\" : \"CROSS\");\n    }\n  }, [grids]);\n\n  useEffect(() => {\n    //CHECK IF PLAYING AGAINTS BOT\n    if (turn === \"ZERO\" && gameWith === \"Bot\") {\n      onBotsTurn();\n    }\n  }, [turn]);\n\n  const sleep = (seconds = 1) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(null);\n      }, seconds * 1000);\n    });\n  };\n\n  const onBotsTurn = async () => {\n    await sleep();\n    //TAKE TURN AUTOMATICALLY\n    let emptyIndexes: number[] = [];\n    grids.map((grid, index) => {\n      if (grid === \"EMPTY\") {\n        emptyIndexes.push(index);\n      }\n    });\n\n    const botSelectedIndex = Math.floor(Math.random() * emptyIndexes.length);\n    onGridPress(emptyIndexes[botSelectedIndex], true);\n  };\n\n  const checkWinner = (): boolean => {\n    if (\n      grids[0] !== \"EMPTY\" &&\n      grids[0] === grids[1] &&\n      grids[1] === grids[2]\n    ) {\n      setWinner(grids[0]);\n      setWinningIndexes([0, 1, 2]);\n      return true;\n    } else if (\n      grids[3] !== \"EMPTY\" &&\n      grids[3] === grids[4] &&\n      grids[4] === grids[5]\n    ) {\n      setWinner(grids[3]);\n      setWinningIndexes([3, 4, 5]);\n      return true;\n    } else if (\n      grids[6] !== \"EMPTY\" &&\n      grids[6] === grids[7] &&\n      grids[7] === grids[8]\n    ) {\n      setWinner(grids[6]);\n      setWinningIndexes([6, 7, 8]);\n      return true;\n    } else if (\n      grids[0] !== \"EMPTY\" &&\n      grids[0] === grids[3] &&\n      grids[3] === grids[6]\n    ) {\n      setWinner(grids[0]);\n      setWinningIndexes([0, 3, 6]);\n      return true;\n    } else if (\n      grids[1] !== \"EMPTY\" &&\n      grids[1] === grids[4] &&\n      grids[4] === grids[7]\n    ) {\n      setWinner(grids[1]);\n      setWinningIndexes([1, 4, 7]);\n      return true;\n    } else if (\n      grids[2] !== \"EMPTY\" &&\n      grids[2] === grids[5] &&\n      grids[5] === grids[8]\n    ) {\n      setWinner(grids[2]);\n      setWinningIndexes([2, 5, 8]);\n      return true;\n    } else if (\n      grids[0] !== \"EMPTY\" &&\n      grids[0] === grids[4] &&\n      grids[4] === grids[8]\n    ) {\n      setWinner(grids[0]);\n      setWinningIndexes([0, 4, 8]);\n      return true;\n    } else if (\n      grids[2] !== \"EMPTY\" &&\n      grids[2] === grids[4] &&\n      grids[4] === grids[6]\n    ) {\n      setWinner(grids[2]);\n      setWinningIndexes([2, 4, 6]);\n      return true;\n    }\n    return false;\n  };\n\n  const onGridPress = (index: number, byBot?: boolean) => {\n    const canGameContinue = gameState.length === 0;\n    let isValidTurn = true;\n    if (gameWith === \"Bot\" && turn === \"ZERO\" && !byBot) {\n      isValidTurn = false;\n    }\n    const isGridEmpty = grids[index] === \"EMPTY\";\n\n    if (canGameContinue && isValidTurn && isGridEmpty) {\n      let newGrids = [...grids];\n      newGrids[index] = turn;\n      setGrids([...newGrids]);\n    }\n  };\n\n  const onReset = () => {\n    setTurn(\"CROSS\");\n    setGrids([\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n      \"EMPTY\",\n    ]);\n    setGameState(\"\");\n    setWinner(undefined);\n    setWinningIndexes([]);\n  };\n\n  return (\n    <Layout style={{ justifyContent: \"center\" }}>\n      <Text\n        style={{\n          fontFamily: FontFamily,\n          fontSize: 45,\n          fontWeight: \"bold\",\n          color: ForegroundColor,\n          textAlign: \"center\",\n        }}\n      >\n        {gameState === \"\"\n          ? turn === \"CROSS\"\n            ? \"X's Turn\"\n            : \"O's Turn\"\n          : gameState === \"Game Over\"\n          ? winner === \"CROSS\"\n            ? \"⭐ X Won ⭐\"\n            : \"⭐ O Won ⭐\"\n          : \"😑 Draw 😑\"}\n      </Text>\n      <View\n        style={{\n          marginVertical: 20,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <View\n          style={{\n            width: 300,\n            height: 300,\n            backgroundColor: \"#2369EE\",\n            borderRadius: 6,\n          }}\n        >\n          <View style={{ flexDirection: \"row\" }}>\n            <GridItem\n              index={0}\n              onPress={onGridPress}\n              state={grids[0]}\n              isWinningIndex={winningIndexes.includes(0)}\n            />\n            <GridItem\n              index={1}\n              onPress={onGridPress}\n              state={grids[1]}\n              isWinningIndex={winningIndexes.includes(1)}\n            />\n            <GridItem\n              index={2}\n              onPress={onGridPress}\n              state={grids[2]}\n              isWinningIndex={winningIndexes.includes(2)}\n            />\n          </View>\n          <View style={{ flexDirection: \"row\" }}>\n            <GridItem\n              index={3}\n              onPress={onGridPress}\n              state={grids[3]}\n              isWinningIndex={winningIndexes.includes(3)}\n            />\n            <GridItem\n              index={4}\n              onPress={onGridPress}\n              state={grids[4]}\n              isWinningIndex={winningIndexes.includes(4)}\n            />\n            <GridItem\n              index={5}\n              onPress={onGridPress}\n              state={grids[5]}\n              isWinningIndex={winningIndexes.includes(5)}\n            />\n          </View>\n          <View style={{ flexDirection: \"row\" }}>\n            <GridItem\n              index={6}\n              onPress={onGridPress}\n              state={grids[6]}\n              isWinningIndex={winningIndexes.includes(6)}\n            />\n            <GridItem\n              index={7}\n              onPress={onGridPress}\n              state={grids[7]}\n              isWinningIndex={winningIndexes.includes(7)}\n            />\n            <GridItem\n              index={8}\n              onPress={onGridPress}\n              state={grids[8]}\n              isWinningIndex={winningIndexes.includes(8)}\n            />\n          </View>\n        </View>\n      </View>\n      <View style={{ flexDirection: \"row\" }}>\n        <Button\n          title={\"Reset\"}\n          onPress={onReset}\n          style={{ marginVertical: 10, marginHorizontal: 10, flex: 1 }}\n        />\n        <Button\n          title={\"Exit\"}\n          onPress={navigation.goBack}\n          style={{ marginVertical: 10, marginHorizontal: 10, flex: 1 }}\n        />\n      </View>\n    </Layout>\n  );\n};\n\ninterface GridItemProps {\n  index: number;\n  state: \"ZERO\" | \"CROSS\" | \"EMPTY\";\n  onPress: (index: number) => void;\n  isWinningIndex: boolean;\n}\nconst GridItem: React.FC<GridItemProps> = ({\n  state,\n  index,\n  onPress,\n  isWinningIndex,\n}) => (\n  <TouchableOpacity\n    onPress={(event: GestureResponderEvent) => onPress(index)}\n    style={{\n      backgroundColor: \"#2c3045\",\n      height: 98,\n      width: 98,\n      margin: 1,\n      borderRadius: 6,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    }}\n    activeOpacity={1}\n  >\n    {state !== \"EMPTY\" ? (\n      <Text\n        style={{\n          width: \"100%\",\n          textAlign: \"center\",\n          fontFamily: FontFamily,\n          fontSize: isWinningIndex ? 60 : 50,\n          fontWeight: \"bold\",\n          color: ForegroundColor,\n          textShadowColor: isWinningIndex ? ForegroundColor : undefined,\n          textShadowOffset: isWinningIndex\n            ? { width: -1, height: 1 }\n            : undefined,\n          textShadowRadius: isWinningIndex ? 15 : undefined,\n        }}\n      >\n        {state === \"CROSS\" ? \"X\" : \"O\"}\n      </Text>\n    ) : (\n      <></>\n    )}\n  </TouchableOpacity>\n);\n\nexport default GameScreen;\n","import React from \"react\";\nimport { useFonts } from \"expo-font\";\nimport AppLoading from 'expo-app-loading';\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\n\nimport HomeScreen from \"./src/screens/HomeScreen\";\nimport GameScreen from \"./src/screens/GameScreen\";\n\nimport { StackParamList } from \"./src/Types\";\n\nconst Stack = createStackNavigator<StackParamList>();\n\nconst App = () => {\n  let [fontsLoaded] = useFonts({\n    BlockheadDude: require(\"./assets/Pacifico-Regular.ttf\"),\n  });\n\n  if (!fontsLoaded) {\n    return <AppLoading />;\n  } else {\n    return (\n      <NavigationContainer>\n        <Stack.Navigator headerMode={\"none\"}>\n          <Stack.Screen name=\"HomeScreen\" component={HomeScreen} />\n          <Stack.Screen name=\"GameScreen\" component={GameScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    );\n  }\n};\n\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/ForkOnGithub.0c95a7c5.png\";","module.exports = __webpack_public_path__ + \"./fonts/Pacifico-Regular.ttf\";"],"sourceRoot":""}